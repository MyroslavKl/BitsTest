@model List<BitsMVCProject.Models.ContactModel>

<div class="container mt-4">
    <h2>Contacts</h2>

    <form asp-action="Import" asp-controller="Contact" method="post" enctype="multipart/form-data" class="mb-4">
        <div class="row">
            <div class="col-md-6">
                <input type="file" name="file" accept=".csv" class="form-control" />
            </div>
            <div class="col-md-6">
                <button type="submit" class="btn btn-primary">Import CSV</button>
            </div>
        </div>
    </form>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <div class="card mb-4">
        <div class="card-header">
            <h5>Filter & Search</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search by name, phone...">
                </div>
                <div class="col-md-3">
                    <select id="marriedFilter" class="form-control">
                        <option value="">All Marital Status</option>
                        <option value="true">Married</option>
                        <option value="false">Single</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <input type="number" id="minSalary" class="form-control" placeholder="Min Salary">
                </div>
                <div class="col-md-2">
                    <button id="clearFilters" class="btn btn-secondary w-100">Clear</button>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-2">
        <small class="text-muted">
            Showing <span id="recordCount">@Model.Count</span> of @Model.Count records
        </small>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover" id="contactsTable">
            <thead class="table-dark">
                <tr>
                    <th class="sortable" data-column="name">
                        Name <span class="sort-icon">⇅</span>
                    </th>
                    <th class="sortable" data-column="dob">
                        Date of Birth <span class="sort-icon">⇅</span>
                    </th>
                    <th class="sortable" data-column="married">
                        Married <span class="sort-icon">⇅</span>
                    </th>
                    <th class="sortable" data-column="phone">
                        Phone <span class="sort-icon">⇅</span>
                    </th>
                    <th class="sortable" data-column="salary">
                        Salary <span class="sort-icon">⇅</span>
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="contactsTableBody">
                @foreach (var contact in Model)
                {
                    <tr data-name="@(contact.Name?.ToLower())"
                        data-phone="@(contact.Phone?.ToLower())"
                        data-married="@contact.Married.ToString().ToLower()"
                        data-salary="@contact.Salary"
                        data-dob="@contact.DateOfBirth.ToString("yyyy-MM-dd")">
                        <td>@contact.Name</td>
                        <td>@contact.DateOfBirth.ToShortDateString()</td>
                        <td>
                            @if (contact.Married)
                            {
                                <span class="badge bg-success">Married</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Single</span>
                            }
                        </td>
                        <td>@contact.Phone</td>
                        <td>$@contact.Salary.ToString("N2")</td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@contact.Id" class="btn btn-sm btn-warning">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <form asp-action="Delete" asp-route-id="@contact.Id" method="post" style="display:inline;"
                                  onsubmit="return confirm('Are you sure you want to delete this contact?');">
                                <button type="submit" class="btn btn-sm btn-danger">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div id="noResults" class="alert alert-info" style="display: none;">
        <i class="fas fa-info-circle"></i> No contacts match your search criteria.
    </div>
</div>

<style>
    .sortable {
        cursor: pointer;
        user-select: none;
        position: relative;
    }


    .sort-icon {
        font-size: 12px;
        margin-left: 5px;
        opacity: 0.6;
    }

    .sortable.asc .sort-icon::before {
        content: "↑";
    }

    .sortable.desc .sort-icon::before {
        content: "↓";
    }


    .badge {
        font-size: 0.8em;
    }

    #searchInput:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const table = document.getElementById('contactsTable');
        const tbody = document.getElementById('contactsTableBody');
        const searchInput = document.getElementById('searchInput');
        const marriedFilter = document.getElementById('marriedFilter');
        const minSalaryInput = document.getElementById('minSalary');
        const clearFiltersBtn = document.getElementById('clearFilters');
        const recordCount = document.getElementById('recordCount');
        const noResults = document.getElementById('noResults');

        let sortColumn = '';
        let sortDirection = 'asc';
        let originalRows = Array.from(tbody.getElementsByTagName('tr'));

        function filterTable() {
            const searchTerm = searchInput.value.toLowerCase();
            const marriedValue = marriedFilter.value;
            const minSalary = parseFloat(minSalaryInput.value) || 0;

            let visibleCount = 0;

            originalRows.forEach(row => {
                const name = row.getAttribute('data-name') || '';
                const phone = row.getAttribute('data-phone') || '';
                const married = row.getAttribute('data-married');
                const salary = parseFloat(row.getAttribute('data-salary')) || 0;

                let showRow = true;

                if (searchTerm && !name.includes(searchTerm) && !phone.includes(searchTerm)) {
                    showRow = false;
                }

                if (marriedValue && married !== marriedValue) {
                    showRow = false;
                }

                if (salary < minSalary) {
                    showRow = false;
                }

                if (showRow) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            recordCount.textContent = visibleCount;

            if (visibleCount === 0) {
                noResults.style.display = 'block';
                table.style.display = 'none';
            } else {
                noResults.style.display = 'none';
                table.style.display = '';
            }
        }

        function sortTable(column) {
            const rows = Array.from(tbody.getElementsByTagName('tr')).filter(row => row.style.display !== 'none');

            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortDirection = 'asc';
                sortColumn = column;
            }

            rows.sort((a, b) => {
                let aVal, bVal;

                switch (column) {
                    case 'name':
                        aVal = a.getAttribute('data-name');
                        bVal = b.getAttribute('data-name');
                        break;
                    case 'dob':
                        aVal = new Date(a.getAttribute('data-dob'));
                        bVal = new Date(b.getAttribute('data-dob'));
                        break;
                    case 'married':
                        aVal = a.getAttribute('data-married') === 'true' ? 1 : 0;
                        bVal = b.getAttribute('data-married') === 'true' ? 1 : 0;
                        break;
                    case 'phone':
                        aVal = a.getAttribute('data-phone');
                        bVal = b.getAttribute('data-phone');
                        break;
                    case 'salary':
                        aVal = parseFloat(a.getAttribute('data-salary')) || 0;
                        bVal = parseFloat(b.getAttribute('data-salary')) || 0;
                        break;
                    default:
                        return 0;
                }

                if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;
                if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;
                return 0;
            });

            document.querySelectorAll('.sortable').forEach(th => {
                th.classList.remove('asc', 'desc');
            });

            const currentHeader = document.querySelector(`[data-column="${column}"]`);
            currentHeader.classList.add(sortDirection);

            rows.forEach(row => tbody.appendChild(row));
        }

        searchInput.addEventListener('input', filterTable);
        marriedFilter.addEventListener('change', filterTable);
        minSalaryInput.addEventListener('input', filterTable);

        clearFiltersBtn.addEventListener('click', function () {
            searchInput.value = '';
            marriedFilter.value = '';
            minSalaryInput.value = '';
            filterTable();
        });

        document.querySelectorAll('.sortable').forEach(th => {
            th.addEventListener('click', function () {
                const column = this.getAttribute('data-column');
                sortTable(column);
            });
        });

        filterTable();
    });
</script>